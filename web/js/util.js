var analytics = require('ga-browser')(),
  util = {};

util.getLocation = function(successCallback, errorCallback) {

  var geolocationError = function(err) {
    switch (err.code) {
      case 1:
        errorCallback('This feature requires your location.  Unable to proceed.');
        break;
      case 2:
      case 3:
        errorCallback('Error getting your location.  Try again later.');
        break;
    }
  }
  // get user location
  if ("geolocation" in navigator) {
    // console.log('geolocation is available');
    navigator.geolocation.getCurrentPosition(successCallback,
      geolocationError,
      {
        enableHighAccuracy: true,
        timeout: 20000,
        maximumAge: 60000
      }
    );
  } else {
    //console.log('geolocation IS NOT available');
    errorCallback('Your web browser does not allow geolocation.  Please use a browser with this feature.');
  }
};

util.reverseGeocode = function(app, position, cb) {
  app.geocoder.geocode({
      location: {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      }
    }, 
    function(results, status) {
      if (status === google.maps.GeocoderStatus.OK) {
        if (results[1]) {
          cb(results[1].formatted_address);
        } else {
          cb();
        }
      } else {
        cb();
      }
    }
  );
}

util.navigateAfterSendingGoogleAnalytics = function(category, action, label, windowLocation) {
  analytics('send', {
      hitType: 'event',          // Required.
      eventCategory: category,   // Required.
      eventAction: action,      // Required.
      eventLabel: label,
      eventValue: 0,
      hitCallback: function() {
        console.log('set location: ' + windowLocation);
        window.location = windowLocation;
      }
    }
  );
}

util.sendAgencyFeedback = function(app, category, action, label, mailToOptions) {
  
  util.getLocation(function(position) {
    util.reverseGeocode(app, position, function(addr) {
      util.navigateAfterSendingGoogleAnalytics(category, action, label, util.makeMailTo(mailToOptions, position, addr));
    });
  }, function(err) {
    util.navigateAfterSendingGoogleAnalytics(category, action, label, util.makeMailTo(mailToOptions));
  });
}

util.makeMailTo = function(mailToOptions, position, addr) {
  mailToOptions = mailToOptions ? mailToOptions : {};

  var mailTo = 'mailto:customer.service@vta.org?subject=' + encodeURIComponent('Transit Service Feedback'),
    body = 'Transit Feedback Template Generated by OnTransit.  www.ontransitapp.com \r\n';

  mailTo += '&body=';

  for(k in mailToOptions) {
    body += k + ': ' + mailToOptions[k] + ' \r\n';
  }

  if(position) {
    body += 'GPS: ' + position.coords.latitude + ', ' + position.coords.longitude + ' \r\n';
    body += 'GPS Accuracy (meters): ' + Math.round(position.coords.accuracy) + ' \r\n';
    if (addr) {
      body += 'Approximate Address: ' + results[1].formatted_address + ' \r\n';
    } else {
      body += 'Approximate Address: Unavailable. \r\n';
    }
  } else {
    body += 'GPS and Approximate Address Unavailable. \r\n';
  }

  return mailTo + encodeURIComponent(body);

};

util.updateMailToTarget = function(app, target, mailToOptions) {
  
  var setTarget = function(v) {
    console.log(target, v);
    $(target).attr('href', v);
  }

  util.getLocation(function(position) {
    util.reverseGeocode(app, position, function(addr) {
      setTarget(util.makeMailTo(mailToOptions, position, addr));
    });

    setTarget(util.makeMailTo(mailToOptions, position));

  }, function(err) {
  });

  setTarget(util.makeMailTo(mailToOptions));
}

util.sendAppFeedback = function(category, action, label) {
  util.navigateAfterSendingGoogleAnalytics(category, action, label, 'https://ontransit.userecho.com/');
}

module.exports = util;